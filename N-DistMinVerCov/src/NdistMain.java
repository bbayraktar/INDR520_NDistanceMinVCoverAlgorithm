
public class NdistMain 
{
	public static void main(String[] args) 
	{
		/*int[] nodes = 	{0,1,2,3,4,5,6,7,8,9,10,11,12};
		int[][] edges = {
							{0,1},
							{1,2},{1,8},{1,9},
							{2,3},{2,5},
							{3,4},
							{5,6},{5,7},
							{8,11},{8,10},
							{10,12}
						};
		int[] nodes = 	{0,1,2,3,4,5,6,7,8,9,10};
		int[][] edges = {
							{0,1},{0,7},
							{1,2},
							{2,3},{2,6},
							{3,4},{3,5},
							{7,8},{7,10},
							{8,9}
						};
		int[] nodes = 	{0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25};
		int[][] edges = {
						{0,1}, //0
						{0,2},{1,2},	//2
						{0,3},{1,3},{2,3},	//5
						{2,4},{3,4},	//7
						{0,5},{2,5},	//9
						{1,6},{2,6},{3,6},	//12
						{0,7},{3,7},{6,7},	//15
						{1,8},{3,8},{5,8},{6,8},	//19
						{0,9},{1,9},{4,9},{5,9},{7,9},{8,9},	//25
						{1,10},{3,10},{7,10},	//28
						{0,11},{1,11},{2,11},{7,11},{9,11},	//33
						{0,12},{1,12},{3,12},{4,12},{5,12},{6,12},{9,12},	//40
						{1,13},{3,13},{6,13},{8,13},{11,13},{12,13},	//46
						{3,14},{6,14},{9,14},{11,14},{12,14},{13,14},	//52
						{0,15},{1,15},{2,15},{3,15},{4,15},{5,15},{9,15},{10,15},{11,15},{12,15},{14,15},	//63
						{3,16},{4,16},{7,16},{8,16},{10,16},{15,16},	//69
						{0,17},{1,17},{3,17},{5,17},{9,17},{10,17},{13,17},{14,17},{16,17},	//78
						{2,18},{3,18},{7,18},{11,18},{13,18},{15,18},	//84
						{1,19},{2,19},{7,19},{10,19},{11,19},{14,19},{15,19},	//91
						{2,20},{4,20},{5,20},{6,20},{7,20},{9,20},{11,20},{13,20},{15,20},{17,20},{18,20}, //102
						{2,21},{3,21},{4,21},{5,21},{6,21},{7,21},{8,21},{9,21},{11,21},{13,21},{14,21},{16,21},{18,21},{19,21},{20,21},	//117
						{0,22},{1,22},{2,22},{3,22},{4,22},{5,22},{6,22},{9,22},{10,22},{11,22},{12,22},{13,22},{15,22},{16,22},{17,22},{18,22},	//133
						{0,23},{1,23},{2,23},{3,23},{6,23},{8,23},{10,23},{12,23},{13,23},{14,23},{18,23},{22,23},	//145
						{0,24},{1,24},{2,24},{3,24},{4,24},{9,24},{10,24},{14,24},{17,24},{18,24},{19,24},{22,24},	//157
						{2,25},{3,25},{6,25},{7,25},{8,25},{9,25},{11,25},{12,25},{14,25},{15,25},{16,25},{17,25},{18,25},{19,25},{23,25},{24,25}	//173
						};
						
								
						{1,38},	{1,51},	{1,31},	{1,33},	{1,80},	{1,46},			
				{2,44},	{2,21},	{2,63},	{2,27},	{2,46},				
				{3,26},	{3,43},	{3,64},	{3,20},	{3,15},	{3,32},	{3,42},		
				{4,36},	{4,76},	{4,25},	{4,49},	{4,13},	{4,65},			
				{68,6},	{68,50},	{68,42},	{68,51},	{68,40},				
				{6,18},	{6,78},	{6,14},	{6,26},	{6,42},	{6,68},	{6,40},	{6,50},	{6,71},
				{5,55},	{5,19},	{5,66},	{5,60},					
				{7,48},	{7,15},	{7,33},	{7,32},	{7,42},	{7,70},			
				{75,36},	{75,25},	{75,8},						
				{8,53},	{8,25},	{8,75},						
				{9,35},	{9,45},	{9,48},	{9,20},					
				{10,16},	{10,35},	{10,45},	{10,43},	{10,17},				
				{74,67},	{74,78},	{74,37},						
				{72,47},	{72,49},	{72,21},	{72,13},	{72,56},				
				{69,61},	{69,25},	{69,53},	{69,24},	{69,29},				
				{11,41},	{11,54},	{11,14},	{11,26},	{11,16},	{11,43},			
				{12,21},	{12,24},	{12,62},	{12,23},	{12,25},	{12,49},			
				{13,65},	{13,56},	{13,72},	{13,49},	{13,4},				
				{14,6},	{14,54},	{14,81},	{14,67},	{14,78},	{14,11},	{14,26},		
				{15,7},	{15,48},	{15,20},	{15,3},	{15,32},				
				{16,10},	{16,77},	{16,43},	{16,11},	{16,41},	{16,54},			
				{17,59},	{17,10},	{17,22},						
				{18,6},	{18,78},	{18,37},	{18,19},	{18,71},				
				{19,37},	{19,55},	{19,57},	{19,66},	{19,5},	{19,71},	{19,18},		
				{20,48},	{20,3},	{20,64},	{20,15},	{20,9},				
				{21,12},	{21,23},	{21,44},	{21,2},	{21,63},	{21,47},	{21,72},	{21,49},	
				{81,54},	{81,67},	{81,14},						
				{22,17},	{22,59},	{22,39},						
				{23,44},	{23,24},	{23,62},	{23,12},	{23,21},				
				{24,28},	{24,29},	{24,69},	{24,62},	{24,44},	{24,58},	{24,25},		
				{25,8},	{25,75},	{25,4},	{25,36},	{25,49},	{25,12},	{25,69},	{25,53},	{25,24},
				{26,6},	{26,14},	{26,11},	{26,43},	{26,3},	{26,42},			
				{27,79},	{27,31},	{27,80},	{27,46},	{27,2},	{27,63},			
				{28,52},	{28,24},	{28,58},	{28,29},	{28,61},				
				{29,28},	{29,61},	{29,69},	{29,24},					
				{30,65},	{30,73},							
				{31,1},	{31,80},	{31,27},	{31,79},					
				{76,4},	{76,36},							
				{34,41},	{34,59},	{34,39},						
				{35,45},	{35,9},	{35,10},						
				{33,1},	{33,42},	{33,7},	{33,51},	{33,70},				
				{32,3},	{32,42},	{32,7},	{32,15},					
				{44,2},	{44,46},	{44,58},	{44,24},	{44,23},	{44,62},			
				{78,67},	{78,74},	{78,6},	{78,14},	{78,37},	{78,18},			
				{70,42},	{70,7},	{70,33},						
				{36,4},	{36,76},	{36,25},	{36,75},					
				{37,18},	{37,19},	{37,78},	{37,74},	{37,57},				
				{38,66},	{38,58},	{38,46},	{38,1},	{38,50},	{38,51},			
				{79,31},	{79,27},							
				{71,6},	{71,40},	{71,66},	{71,18},	{71,19},				
				{39,22},	{39,59},							
				{40,6},	{40,66},	{40,71},	{40,50},					
				{41,34},	{41,16},	{41,54},	{41,77},					
				{42,6},	{42,68},	{42,51},	{42,33},	{42,70},	{42,7},	{42,32},	{42,3},	{42,26},
				{43,10},	{43,16},	{43,11},	{43,26},	{43,3},	{43,64},	{43,45},		
				{44,2},	{44,46},	{44,58},	{44,24},	{44,21},	{44,23},	{44,62},		
				{45,35},	{45,9},	{45,10},	{45,43},	{45,64},	{45,20},			
				{47,63},	{47,21},	{47,72},	{47,73},	{47,56},				
				{48,7},	{48,20},	{48,9},	{48,15},					
				{49,72},	{49,21},	{49,25},	{49,13},	{49,12},	{49,4},			
				{67,81},	{67,14},	{67,78},	{67,74},					
				{66,58},	{66,60},	{66,5},	{66,19},	{66,71},	{66,40},	{66,50},	{66,38},	
				{77,16},	{77,41},							
				{65,4},	{65,13},	{65,56},	{65,73},	{65,30},				
				{64,20},	{64,45},	{64,3},	{64,43},					
				{62,12},	{62,24},	{62,23},	{62,44},					
				{61,28},	{61,29},	{61,69},	{61,53},					
				{60,5},	{60,52},	{60,55},	{60,58},	{60,66},				
				{59,17},	{59,22},	{59,39},	{59,34},					
				{73,47},	{73,56},	{73,65},	{73,30},					
				{63,27},	{63,2},	{63,21},	{63,47},					
				{58,60},	{58,52},	{58,28},	{58,24},	{58,44},	{58,46},	{58,38},	{58,66},	
				{57,37},	{57,19},	{57,55},						
				{56,13},	{56,72},	{56,65},	{56,73},	{56,47},				
				{55,57},	{55,19},	{55,5},	{55,60},	{55,52},				
				{54,41},	{54,81},	{54,14},	{54,11},	{54,16},				
				{53,61},	{53,69},	{53,8},	{53,25},					
				{80,31},	{80,46},	{80,1},	{80,27},					
				{52,55},	{52,58},	{52,28},	{52,60},					
				{51,1},	{51,33},	{51,42},	{51,50},	{51,38},	{51,68},			
				{50,66},	{50,40},	{50,68},	{50,51},	{50,38},	{50,6},	
						
						*/
		long startTime = System.currentTimeMillis();

		int noden=100;
		int[] nodes= new int[noden];
		for (int i=0;i<noden;i++)
		{
			nodes[i]=i;
		}
		int[][] edges = {
				{0,1},
				{1,2},
				{1,3},
				{0,4},
				{4,5},
				{4,6},
				{5,7},
				{1,8},{2,8},
				{2,9},
				{9,10},
				{0,11},
				{9,12},
				{8,13},{12,13},
				{10,14},
				{6,15},
				{11,16},
				{4,17},
				{15,18},
				{8,19},
				{10,20},
				{11,21},{19,21},
				{1,22},{11,22},
				{7,23},
				{3,24},{20,24},
				{6,25},{22,25},
				{9,26},
				{6,27},
				{15,28},{24,28},
				{11,29},{25,29},
				{21,30},
				{1,31},
				{12,32},{25,32},{26,32},
				{0,33},{4,33},{8,33},
				{2,34},{7,34},{16,34},{20,34},{28,34},
				{7,35},{9,35},{17,35},{33,35},
				{19,36},
				{24,37},
				{2,38},{6,38},{12,38},{17,38},{18,38},{30,38},
				{22,39},{30,39},
				{5,40},{38,40},
				{14,41},
				{15,42},{16,42},{26,42},
				{3,43},{29,43},{37,43},
				{11,44},{36,44},
				{24,45},{44,45},
				{10,46},
				{22,47},{46,47},
				{6,48},{7,48},
				{1,49},
				{0,50},{4,50},{18,50},
				{23,51},
				{42,52},
				{29,53},{39,53},{47,53},
				{8,54},{28,54},{43,54},
				{6,55},{40,55},{44,55},
				{16,56},{54,56},
				{2,57},{28,57},{32,57},
				{22,58},{45,58},
				{1,59},
				{14,60},{15,60},{25,60},{27,60},{45,60},
				{26,61},{47,61},{57,61},
				{4,62},{11,62},{38,62},{51,62},
				{25,63},{26,63},{33,63},{39,63},{59,63},
				{1,64},{36,64},{56,64},
				{3,65},{16,65},{22,65},{35,65},{48,65},
				{6,66},{42,66},
				{32,67},
				{0,68},{2,68},{3,68},{6,68},{57,68},
				{47,69},
				{10,70},{28,70},{53,70},{59,70},
				{4,71},{27,71},{60,71},
				{6,72},{16,72},{38,72},
				{29,73},{40,73},
				{7,74},{31,74},{46,74},{52,74},
				{1,75},{10,75},{47,75},{64,75},
				{17,76},{21,76},{60,76},
				{7,77},{72,77},
				{2,78},{21,78},{53,78},{54,78},
				{6,79},{16,79},{52,79},
				{2,80},{18,80},{22,80},{29,80},{34,80},{51,80},
				{13,81},{15,81},{16,81},{52,81},{59,81},{68,81},{74,81},
				{1,82},{3,82},{48,82},{59,82},{61,82},
				{11,83},{54,83},{64,83},{67,83},{79,83},{81,83},
				{20,84},{33,84},{45,84},{46,84},{63,84},{74,84},
				{32,85},{73,85},{81,85},
				{14,86},{16,86},{27,86},{39,86},{61,86},{76,86},{79,86},
				{15,87},{26,87},{27,87},{51,87},{60,87},{74,87},
				{6,88},{10,88},{27,88},{40,88},{50,88},{68,88},
				{19,89},{24,89},
				{46,90},{50,90},{52,90},{56,90},{74,90},{84,90},
				{22,91},{45,91},
				{2,92},{44,92},{74,92},{75,92},{81,92},{83,92},{84,92},{89,92},
				{19,93},{28,93},{36,93},{63,93},{91,93},
				{16,94},{20,94},{37,94},{61,94},
				{9,95},{13,95},{77,95},
				{13,96},{15,96},{46,96},
				{57,97},
				{0,98},{3,98},{16,98},{39,98},{53,98},{57,98},{71,98},
				{62,99},{72,99},{74,99},{98,99},

				};
		
		int[][] red_edges= {};
		int[][] enter= {};
		int k = 8;
		int n= k-1;
		int[][] reduced_edges=Algorithm2.ReducedEdges(nodes,edges,n+1);
		n=reduced_edges[reduced_edges.length-1][0];
		reduced_edges=Algorithm2.DelMatrix3(reduced_edges);
		for(int i=0;i<reduced_edges.length;i++)
		{
			if(reduced_edges[i][2]==1)
			{
				red_edges=Algorithm2.AddMatrix3(red_edges, reduced_edges[i]);
			}
		}
		for(int i=0;i<reduced_edges.length;i++)
		{
			if(reduced_edges[i][2]==0)
			{
				enter=Algorithm2.AddMatrix3(enter, reduced_edges[i]);
					
			}
		}
		while(true)
		{
			reduced_edges=Algorithm2.ReducedEdges(nodes,enter,n+1);
			n=reduced_edges[reduced_edges.length-1][0];
			reduced_edges=Algorithm2.DelMatrix3(reduced_edges);
			for(int i=0;i<reduced_edges.length;i++)
			{
				if(reduced_edges[i][2]==1)
				{
					red_edges=Algorithm2.AddMatrix3(red_edges, reduced_edges[i]);
				}
			}
			if(n<2)
			{
				for(int i=0;i<enter.length;i++)
				{
						red_edges=Algorithm2.AddMatrix3(red_edges, enter[i]);
				}
				break;
			}
			enter= new int[0][0];
			for(int i=0;i<reduced_edges.length;i++)
			{
				if(reduced_edges[i][2]==0)
				{
					enter=Algorithm2.AddMatrix3(enter, reduced_edges[i]);
				}
			}
		}
		Algorithm3_4.nDistMinVertexCover(red_edges, nodes);
		System.out.println();
		System.out.println("Number of Nodes: " + noden);
		System.out.println("Number of Edges:" + edges.length);
		System.out.println("N:" + (k-1));
		System.out.println();
	    long stopTime = System.currentTimeMillis();
	    long elapsedTime = stopTime - startTime;
	    System.out.println("Time elapsed: "+elapsedTime);
	}
}
